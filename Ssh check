I can help you with that. A Bash script to SSH into multiple servers can be created using a few different methods. The best approach depends on your specific needs, such as whether you need to run the same command on all servers or log in interactively to each one.
Method 1: Looping Through a List of Servers
This is the most common and flexible method. You can store the list of servers in an array or a separate file. This script will iterate through the list, establish an SSH connection, and execute a command on each server.
Script with an Array
This script is simple and works well for a small, static list of servers.
#!/bin/bash

# List of servers to connect to
SERVERS=("server1.example.com" "server2.example.com" "192.168.1.10")
# The command to execute on each server
COMMAND="hostname" # Example command

for server in "${SERVERS[@]}"; do
    echo "--- Connecting to $server ---"
    ssh user@$server "$COMMAND"
    echo "--- Finished with $server ---"
    echo ""
done

 * SERVERS=("server1.example.com" ...): This line creates a Bash array named SERVERS containing the hostnames or IP addresses of the servers.
 * for server in "${SERVERS[@]}": This loop iterates through each element in the SERVERS array, assigning the current server's name to the server variable.
 * ssh user@$server "$COMMAND": This is the core command. It uses ssh to connect as user to the current $server and executes the specified $COMMAND. The quotes around $COMMAND are crucial to handle commands with spaces.
Method 2: Reading from a File
This method is ideal for a long or frequently changing list of servers. It keeps the list separate from the script, making it easier to manage.
servers.txt
First, create a simple text file named servers.txt with one server per line.
server1.example.com
server2.example.com
192.168.1.10

Script
Now, use the following Bash script to read and process this file.
#!/bin/bash

# The command to execute on each server
COMMAND="uptime"

while IFS= read -r server; do
    echo "--- Connecting to $server ---"
    ssh user@$server "$COMMAND"
    echo "--- Finished with $server ---"
    echo ""
done < servers.txt

 * while IFS= read -r server; do ... done < servers.txt: This is a standard and robust way to read a file line by line in Bash.
   * IFS=: Temporarily sets the Internal Field Separator to nothing, preventing leading/trailing whitespace from being trimmed.
   * -r: Prevents backslash escapes from being interpreted.
Method 3: Interactive Login
Sometimes, you don't want to run an automated command but rather open an interactive terminal on each server one by one. This script will log you into each server, and when you exit, it will automatically proceed to the next one.
Script for Interactive Login
#!/bin/bash

# List of servers
SERVERS=("server1.example.com" "server2.example.com")

for server in "${SERVERS[@]}"; do
    echo "--- SSHing into $server. Type 'exit' to proceed to the next server. ---"
    ssh user@$server
    echo "--- Disconnected from $server. Proceeding... ---"
    echo ""
done

echo "All servers have been processed."

 * ssh user@$server: Without a command at the end, ssh will open an interactive shell on the remote server. The script will wait for the ssh session to terminate (i.e., when you type exit).
Important Considerations
 * Passwordless Authentication: To use these scripts efficiently, you must set up passwordless SSH using SSH keys. Otherwise, you'll be prompted for a password for every server, making the script unusable for automation.
 * Error Handling: For production use, you should add error handling. For example, you can check the ssh command's exit status ($?) to see if the connection was successful.
 * Concurrency: For a large number of servers, running commands sequentially can be slow. You can use tools like parallel or create a script that uses background processes to run commands on multiple servers simultaneously.
 * SSH Config File: For a cleaner script, you can define your server aliases, users, and ports in your ~/.ssh/config file. This lets you simplify the ssh user@server command to just ssh alias.

